- name: Ensure Homebrew directory exists.
  file:
    path: "{{ homebrew_install_path }}"
    owner: "{{ local_username }}"
    group: "{{ local_user_groupname }}"
    state: directory
  become: true

# Clone Homebrew.
- name: Ensure Homebrew is installed.
  git:
    repo: "{{ homebrew_repo }}"
    version: master
    dest: "{{ homebrew_install_path }}"
    update: false
    umask: "0000"
    accept_hostkey: true
    depth: 1
  become: false

- name: Ensure proper permissions and ownership on Homebrew repo.
  file:
    path: "{{ homebrew_install_path }}"
    owner: "{{ local_username }}"
    group: "{{ local_user_groupname }}"
    state: directory
  become: false

# Place brew binary in proper location and complete setup.
- name: Check if homebrew binary is already in place.
  stat: "path={{ homebrew_brew_bin_path }}/brew"
  register: homebrew_binary

- name: Force update brew after installation.
  command: "{{ rosetta_cmd|default('') }}{{ homebrew_brew_bin_path }}/brew update --force"
  when: not homebrew_binary.stat.exists
  become: false

# Taps.
- name: Ensure configured taps are tapped.
  community.general.homebrew_tap:
    tap: "{{ homebrew_taps }}"
    state: present
  become: false
  when:
    - homebrew_taps | length > 0
  
  

- name: Execute any commands prior to installing homebrew packages
  command: "{{ item }}"
  loop: "{{ (pre_brew_install_scripts | default([])) | list }}"

# Cask.
- set_fact:
    homebrew_cask_packages: "{{ (homebrew_cask_common_packages + homebrew_cask_user_packages) | unique }}"

- name: Install configured cask applications
  community.general.homebrew_cask:
    name: "{{ homebrew_cask_packages }}"
    state: present
    accept_external_apps: true
  when:
    - homebrew_cask_packages | length > 0

- name: Ensure blacklisted cask applicatons are removed
  community.general.homebrew_cask:
    name: "{{ homebrew_cask_uninstalled_packages }}"
    state: absent
    accept_external_apps: true
  when:
    - homebrew_cask_uninstalled_packages | length > 0

# Brew.
- set_fact:
    homebrew_packages: "{{ (homebrew_common_packages + homebrew_user_packages) | unique }}"

- name: Ensure configured homebrew packages are installed.
  homebrew:
    name: "{{ homebrew_packages }}"
    state: present
  become: false
  when:
    - homebrew_packages | length > 0

- name: Ensure blacklisted homebrew packages are not installed.
  homebrew:
    name: "{{ homebrew_uninstalled_packages }}"
    state: absent
  become: false
  when:
    - homebrew_uninstalled_packages | length > 0

- name: Upgrade all homebrew packages (if configured).
  homebrew:
    update_homebrew: yes
    upgrade_all: yes
  when: homebrew_upgrade_all_packages
  become: false

- name: Check for Brewfile.
  stat:
    path: "{{ homebrew_brewfile_dir }}/Brewfile"
  register: homebrew_brewfile

- name: Install from Brewfile.
  command: "brew bundle chdir={{ homebrew_brewfile_dir }}"
  when: homebrew_brewfile.stat.exists and homebrew_use_brewfile
  become: false
