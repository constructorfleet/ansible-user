- name: Install xcode cli utils
  block:
    - name: Install xcode cli utilities
      ansible.builtin.command:
        cmd: "xcode-select --install"
        creates: /usr/bin/gcc
      become: false
      register: xcode_cli_install
    - name: Print xcode cli installation results
      ansible.builtin.debug:
        msg: "{{ xcode_cli_install }}"
        verbosity: 1
    - name: Check if xcodebuild exists
      ansible.builtin.command:
        cmd: which -s xcodebuild
      register: xcodebuild_exists
      changed_when: false
    - name: Accept xcode license
      ansible.builtin.command:
        cmd: "xcodebuild -license accept"
      become: true
      register: xcode_license_accept
      when:
        - user_has_sudo|default(False)
        - xcodebuild_exists.rc == 0
      changed_when:
        - xcode_license_accept.changed
    - name: Print xcode licence result
      ansible.builtin.debug:
        msg: "{{ xcode_license_accept }}"
        verbosity: 1
      when:
        - user_has_sudo|default(False)
        - xcodebuild_exists.rc == 0

    - name: Check if homebrew is available
      block:
        - name: Test executing homebrew in check_mode (no changes)
          community.general.homebrew:
            update_homebrew: true
          check_mode: true

        - name: Homebrew present
          ansible.builtin.debug:
            msg: Homebrew is installed

        - name: Update homebrew
          community.general.homebrew:
            update_homebrew: true

      rescue:
        - name: Homebrew not present
          ansible.builtin.debug:
            msg: Homebrew is not installed
        - name: Set install_homebrew value
          ansible.builtin.set_fact:
            install_homebrew: true

- name: Install Homebrew in user home directory
  when:
    - install_homebrew|default(false)
    - not user_has_sudo|default(false)
  block:
    - name: Create local homebrew directory
      ansible.builtin.file:
        path: "{{ local_user_homedir }}/homebrew"
        owner: "{{ local_username }}"
        group: "{{ local_user_groupname }}"
        state: directory
        mode: '2664'
    - name: Install Homebrew
      ansible.builtin.shell:
        cmd: |
          "curl -L {{ homebrew_repo }}brew/tarball/master"
          "tar xz --strip 1 -C homebrew"
        chdir: "{{ local_user_homedir }}/homebrew"
        creates: "{{ local_user_homedir }}/homebrew/bin/brew"
      register: homebrew_binary_install


- name: Install Homebrew system-wide
  when:
    - install_homebrew|default(false)
    - user_has_sudo|default(false)
  block:
    - name: Download and install Homebrew
      ansible.builtin.shell:
        cmd: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        executable: /bin/bash
      register: homebrew_binary_install

- name: Print homebrew installation results
  ansible.builtin.debug:
    msg: "{{ homebrew_binary_install }}"
  when: homebrew_binary_install is changed | default(false)

# Taps.
- name: Ensure configured taps are tapped.
  community.general.homebrew_tap:
    tap: "{{ homebrew_taps }}"
    state: present
  when:
    - homebrew_taps | length > 0

- name: Execute any commands prior to installing homebrew packages
  ansible.builtin.command: "{{ item | default([]) }}"
  loop: "{{ pre_brew_install_scripts }}"
  become: true
  when:
    - pre_brew_install_scripts | length > 0
  register: brew_preinstall
  changed_when:
    - brew_preinstall is changed

# Cask.
- name: Create list of cask packages
  ansible.builtin.set_fact:
    homebrew_cask_packages: "{{ (homebrew_cask_common_packages + homebrew_cask_user_packages) | unique }}"

- name: Install configured cask applications
  community.general.homebrew_cask:
    name: "{{ homebrew_cask_packages | default([]) }}"
    state: present
    accept_external_apps: true
    install_options: 'appdir=/$HOME/Applications'
  when:
    - homebrew_cask_packages | length > 0

- name: Ensure blacklisted cask applicatons are removed
  community.general.homebrew_cask:
    name: "{{ homebrew_cask_uninstalled_packages | default([]) }}"
    state: absent
    accept_external_apps: true
    install_options: 'appdir=/$HOME/Applications,force'
  when:
    - homebrew_cask_uninstalled_packages | length > 0

# Brew.
- name: Create list of homebrew packages
  ansible.builtin.set_fact:
    homebrew_packages: "{{ (homebrew_common_packages + homebrew_user_packages) | unique }}"

- name: Ensure configured homebrew packages are installed.
  community.general.homebrew:
    name: "{{ homebrew_packages | default([]) }}"
    state: present
  register: homebrew_install
  when:
    - homebrew_packages | length > 0
  failed_when: false

- name: Debug homebrew
  # Comment
  ansible.builtin.debug:
    msg: "{{ homebrew_install }}"
    verbosity: 0

- name: Ensure blacklisted homebrew packages are not installed.
  community.general.homebrew:
    name: "{{ homebrew_uninstalled_packages | default([]) }}"
    state: absent
  when:
    - homebrew_uninstalled_packages | length > 0


- name: Upgrade all homebrew packages (if configured).
  community.general.homebrew:
    upgrade_all: true
  when: homebrew_upgrade_all_packages

- name: Check for Brewfile.
  ansible.builtin.stat:
    path: "{{ homebrew_brewfile_dir }}/Brewfile"
  register: homebrew_brewfile

- name: Install from Brewfile.
  ansible.builtin.command: "brew bundle chdir={{ homebrew_brewfile_dir }}"
  when: homebrew_brewfile.stat.exists
  register: install_brewfile
  changed_when:
    - install_brewfile.changed
